{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.6ea45f597f28e74bf31d.hot-update.js","sources":["webpack:///./core/api.js","webpack:///./core/fetch.js","webpack:///./pages/index.js"],"sourcesContent":["import fetch from \"./fetch\";\r\nlet api = 'https://11140b99.cpolar.io/';\r\nexport const login = () => {\r\n    fetch(api + '/users/login').then(res => {\r\n        return res.json();\r\n    }).then(res => {\r\n        console.log(res);\r\n    })\r\n}  ","const aa = require('isomorphic-unfetch');\r\n// import fetch from 'isomorphic-unfetch';\r\nconst fetch = aa(url, { // url: 请求地址\r\n    method: \"POST\", // 请求的方法POST/GET等\r\n    headers: { // 请求头（可以是Headers对象，也可是JSON对象）\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Accept': 'application/json'\r\n    },\r\n    // body: , // 请求发送的数据 blob、BufferSource、FormData、URLSearchParams（get或head方法中不能包含body）\r\n    cache: 'default', // 是否缓存这个请求\r\n    credentials: 'same-origin', //要不要携带 cookie 默认不携带 omit、same-origin 或者 include\r\n    mode: \"\",\r\n    /*  \r\n        mode,给请求定义一个模式确保请求有效\r\n        same-origin:只在请求同域中资源时成功，其他请求将被拒绝（同源策略）\r\n        cors : 允许请求同域及返回CORS响应头的域中的资源，通常用作跨域请求来从第三方提供的API获取数据\r\n        cors-with-forced-preflight:在发出实际请求前执行preflight检查\r\n        no-cors : 目前不起作用（默认）\r\n\r\n    */\r\n}).then(resp => {\r\n    /*\r\n        Response 实现了 Body, 可以使用 Body 的 属性和方法:\r\n\r\n        resp.type // 包含Response的类型 (例如, basic, cors).\r\n\r\n        resp.url // 包含Response的URL.\r\n\r\n        resp.status // 状态码\r\n\r\n        resp.ok // 表示 Response 的成功还是失败\r\n\r\n        resp.headers // 包含此Response所关联的 Headers 对象 可以使用\r\n\r\n        resp.clone() // 创建一个Response对象的克隆\r\n\r\n        resp.arrayBuffer() // 返回一个被解析为 ArrayBuffer 格式的promise对象\r\n\r\n        resp.blob() // 返回一个被解析为 Blob 格式的promise对象\r\n\r\n        resp.formData() // 返回一个被解析为 FormData 格式的promise对象\r\n\r\n        resp.json() // 返回一个被解析为 Json 格式的promise对象\r\n\r\n        resp.text() // 返回一个被解析为 Text 格式的promise对象\r\n    */\r\n    if (resp.status === 200) return resp.json();\r\n    // 注： 这里的 resp.json() 返回值不是 js对象，通过 then 后才会得到 js 对象\r\n    // throw New Error('false of json');\r\n}).then(json => {\r\n    console.log(json);\r\n}).catch(error => {\r\n    consolr.log(error);\r\n})\r\nexport default fetch;","import Layout from '../components/MyLayout.js';\r\nimport Link from 'next/link';\r\nimport {login} from \"../core/api\";\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\n// import Markdown from 'react-markdown';\r\nconst List = ({ show }) => (\r\n  <li>\r\n    <Link as={`/p/${show.id}`} href={`/post?id=${show.id}`}>\r\n      <a>{show.name}</a>\r\n    </Link>\r\n  </li>\r\n)\r\nfunction aa() {\r\n  login({\r\n    loginName: \"15701571076\",\r\n    passWord: \"12345q\"\r\n  }).then(res => {\r\n\r\n  })\r\n}\r\nconst Index = props => (\r\n\r\n  <Layout>\r\n    <h1 onClick={aa}>Batman TV Shows</h1>\r\n    <ul>\r\n      {props.shows.map(show => (\r\n        <List key={show.id} show={show}></List>\r\n      ))}\r\n    </ul>\r\n    <style jsx global>\r\n      {\r\n        `\r\n                h1 {\r\n                    color: red;\r\n                }\r\n                li {\r\n                    list-style: none;\r\n                }\r\n            `\r\n      }\r\n    </style>\r\n  </Layout>\r\n);\r\n\r\nIndex.getInitialProps = async function () {\r\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\r\n  const data = await res.json();\r\n\r\n  console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n  return {\r\n    shows: data.map(entry => entry.show)\r\n  };\r\n};\r\n\r\nexport default Index;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;;;;;;;;AAVA;AAmBA;;;;;;;;;;;;;;AAyBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAFA;AACA;AAMA;AACA;AACA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AADA;AAHA;AAAA;AAFA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAEA;AAJA;AAOA;AAAA;AAAA;AADA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;A","sourceRoot":""}